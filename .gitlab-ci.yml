image: docker:latest

services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay
  # GKE INFO
  CLUSTER_NAME: ${GKE_CLUSTER}
  ZONE: ${GKE_ZONE}
  PROJECT: ${GKE_PROJECT_ID}
  # CONTAINER INFO
  CHART_PATH: k8s-bospull
  CONTAINER_IMAGE: registry.gitlab.com/${CI_PROJECT_PATH}
  CONTAINER_IMAGE_BUILT: ${CONTAINER_IMAGE}
  CONTAINER_IMAGE_LATEST: ${CONTAINER_IMAGE}:latest
  # DEPLOY
  DOMAIN_NAME_STAGING: staging-bos-pull.keosd.io
  DOMAIN_NAME_PROD: bos-pull.keosd.io
  STAGE_NAMESPACE: bos-pull-stage
  PROD_NAMESPACE: bos-pull-prod
  STAGE_RELEASE_NAME: bos-pull-stage
  PROD_RELEASE_NAME: bos-pull-prod
  STAGE_BUCKET_NAME: gs://staging-bos-pull.keosd.io
  PROD_BUCKET_NAME: gs://bos-pull.keosd.io

stages:
  - build
  - package
  - deploy

node-build:
  image: noprom/node-vue:10.8.0
  stage: build
  script:
    - "npm install && npm update && npm run build"
  only:
    - master
    - develop
  artifacts:
    name: "dist"
    untracked: true
    paths:
      - $CI_PROJECT_DIR/dist

# docker-build:
#   stage: package
#   script:
#     - docker build -t registry.gitlab.com/${CI_PROJECT_PATH}:$(echo ${CI_COMMIT_SHA:0-8:8}) .
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#     - docker push registry.gitlab.com/${CI_PROJECT_PATH}:$(echo ${CI_COMMIT_SHA:0-8:8})
#   after_script:
#     - docker images|grep none|awk '{print $3}'|xargs docker rmi
#     - echo "commit:${CI_COMMIT_SHA:0-8:8}"
#   dependencies:
#     - node-build
#   only:
#     - master
#     - develop

# k8s-staging-deploy:
#   image: noprom/gcloud-k8s-helm:2.8.1
#   stage: deploy
#   environment:
#     name: staging
#     url: https://${DOMAIN_NAME_STAGING}
#   only:
#     - prd/v0.1.0
#   before_script:
#     - echo "$GOOGLE_KEY" > key.json
#     - gcloud auth activate-service-account --key-file key.json
#     - gcloud container clusters get-credentials ${CLUSTER_NAME} --zone ${ZONE} --project ${PROJECT}
#     - eval $(ssh-agent -s)
#     - bash -c 'ssh-add <(echo "$CI_SSH_PRIVATE_KEY")'
#     - mkdir -p ~/.ssh
#     - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#     - cd ~/ && git clone ${CI_REPOSITORY} && cd ~/${CHART_PATH} && git checkout -b ${CI_REPOSITORY_BRANCH} origin/${CI_REPOSITORY_BRANCH}
#   script:
#     - cd ~/${CHART_PATH} && ls && echo "commit:${CI_COMMIT_SHA:0:8}"
#     - helm upgrade ${STAGE_RELEASE_NAME}
#       --set image.tag=$(echo ${CI_COMMIT_SHA:0:8})
#       --wait
#       --namespace=${STAGE_NAMESPACE}
#       --values ~/${CHART_PATH}/values.stage.yaml
#       ~/${CHART_PATH}

# k8s-prod-deploy:
#   image: noprom/gcloud-k8s-helm:2.8.1
#   stage: deploy
#   environment:
#     name: production
#     url: https://${DOMAIN_NAME_PROD}
#   # when: manual
#   only:
#     - prd/v0.1.0
#   before_script:
#     - echo "$GOOGLE_KEY" > key.json
#     - gcloud auth activate-service-account --key-file key.json
#     - gcloud container clusters get-credentials ${CLUSTER_NAME} --zone ${ZONE} --project ${PROJECT}
#     - eval $(ssh-agent -s)
#     - bash -c 'ssh-add <(echo "$CI_SSH_PRIVATE_KEY")'
#     - mkdir -p ~/.ssh
#     - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#     - cd ~/ && git clone ${CI_REPOSITORY} && cd ~/${CHART_PATH} && git checkout -b ${CI_REPOSITORY_BRANCH} origin/${CI_REPOSITORY_BRANCH}
#   script:
#     - cd ~/${CHART_PATH} && ls && echo "commit:${CI_COMMIT_SHA:0:8}"
#     - helm upgrade ${PROD_RELEASE_NAME}
#       --set image.tag=$(echo ${CI_COMMIT_SHA:0:8})
#       --wait
#       --namespace=${PROD_NAMESPACE}
#       --values ~/${CHART_PATH}/values.yaml
#       ~/${CHART_PATH}

gs-staging-deploy:
  image: noprom/gcloud-k8s-helm:v2.9.2
  stage: deploy
  environment:
    name: staging
    url: https://${DOMAIN_NAME_STAGING}
  dependencies:
    - node-build
  only:
    - master
  before_script:
    - echo "$GOOGLE_GS_KEY" > key.json
    - gcloud auth activate-service-account --key-file key.json
  script:
    - gsutil -m rsync -r -d dist ${STAGE_BUCKET_NAME}

gs-prod-deploy:
  image: noprom/gcloud-k8s-helm:v2.9.2
  stage: deploy
  when: manual
  environment:
    name: production
    url: https://${DOMAIN_NAME_PROD}
  dependencies:
    - node-build
  only:
    - master
  before_script:
    - echo "$GOOGLE_GS_KEY" > key.json
    - gcloud auth activate-service-account --key-file key.json
  script:
    - gsutil -m rsync -r -d dist ${PROD_BUCKET_NAME}
